// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The profile page Will render for pins created by the user 1`] = `
<Fragment>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
        "justifyContent": "space-between",
        "marginLeft": 10,
        "marginRight": 10,
        "marginTop": 60,
      }
    }
  >
    <ForwardRef(Typography)
      color="text.secondary"
      variant="h4"
    >
      PROFILE
    </ForwardRef(Typography)>
    <ForwardRef(Avatar)
      sx={
        Object {
          "bgcolor": "#1DA1F2",
          "mt": 3,
        }
      }
    >
      <Memo(ForwardRef(TwitterIcon))
        style={
          Object {
            "fontSize": 25,
          }
        }
      />
    </ForwardRef(Avatar)>
    <ForwardRef(Typography)
      sx={
        Object {
          "mt": 3,
        }
      }
      variant="h6"
    >
      stubName
    </ForwardRef(Typography)>
    <UserPinsSelector
      displaySetting="created"
      setDisplaySetting={[Function]}
    />
  </div>
  <ImageBuild
    deletePin={null}
    pinImage={true}
    pinList={
      Array [
        Object {
          "_id": 3,
          "comments": Array [],
          "createdAt": "2020-12-25T00:00:00.000+00:00",
          "hasSaved": false,
          "imgDescription": "imgDescription id-3",
          "imgLink": "imgLink id-3",
          "owner": Object {
            "name": "owner id-3",
            "service": "github",
            "userId": "3",
          },
          "owns": true,
          "savedBy": Array [
            Object {
              "name": "savedBy - id-3",
              "service": "google",
              "userId": "3",
            },
            Object {
              "name": "savedBy - id-3",
              "service": "github",
              "userId": "3",
            },
          ],
          "tags": Array [],
        },
      ]
    }
    ready={true}
    user={
      Object {
        "authenticated": true,
      }
    }
  />
</Fragment>
`;

exports[`The profile page Will render for pins saved by the user 1`] = `
<Fragment>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
        "justifyContent": "space-between",
        "marginLeft": 10,
        "marginRight": 10,
        "marginTop": 60,
      }
    }
  >
    <ForwardRef(Typography)
      color="text.secondary"
      variant="h4"
    >
      PROFILE
    </ForwardRef(Typography)>
    <ForwardRef(Avatar)
      sx={
        Object {
          "bgcolor": "#1DA1F2",
          "mt": 3,
        }
      }
    >
      <Memo(ForwardRef(TwitterIcon))
        style={
          Object {
            "fontSize": 25,
          }
        }
      />
    </ForwardRef(Avatar)>
    <ForwardRef(Typography)
      sx={
        Object {
          "mt": 3,
        }
      }
      variant="h6"
    >
      stubName
    </ForwardRef(Typography)>
    <UserPinsSelector
      displaySetting="saved"
      setDisplaySetting={[Function]}
    />
  </div>
  <ImageBuild
    deletePin={null}
    pinImage={true}
    pinList={
      Array [
        Object {
          "_id": 2,
          "comments": Array [],
          "createdAt": "2020-12-25T00:00:00.000+00:00",
          "hasSaved": true,
          "imgDescription": "imgDescription id-2",
          "imgLink": "imgLink id-2",
          "owner": Object {
            "name": "owner id-2",
            "service": "twitter",
            "userId": "2",
          },
          "owns": false,
          "savedBy": Array [
            Object {
              "name": "savedBy - id-2",
              "service": "google",
              "userId": "2",
            },
            Object {
              "name": "savedBy - id-2git",
              "service": "github",
              "userId": "2",
            },
          ],
          "tags": Array [
            Object {
              "_id": "tag_id_1",
              "tag": "tag 1",
            },
          ],
        },
      ]
    }
    ready={true}
    user={
      Object {
        "authenticated": true,
      }
    }
  />
</Fragment>
`;

exports[`The profile page Will render no image sign if user has not pinned or created any 1`] = `
<Fragment>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
        "justifyContent": "space-between",
        "marginLeft": 10,
        "marginRight": 10,
        "marginTop": 60,
      }
    }
  >
    <ForwardRef(Typography)
      color="text.secondary"
      variant="h4"
    >
      PROFILE
    </ForwardRef(Typography)>
    <ForwardRef(Avatar)
      sx={
        Object {
          "bgcolor": "#1DA1F2",
          "mt": 3,
        }
      }
    >
      <Memo(ForwardRef(TwitterIcon))
        style={
          Object {
            "fontSize": 25,
          }
        }
      />
    </ForwardRef(Avatar)>
    <ForwardRef(Typography)
      sx={
        Object {
          "mt": 3,
        }
      }
      variant="h6"
    >
      stubName
    </ForwardRef(Typography)>
    <UserPinsSelector
      displaySetting="created"
      setDisplaySetting={[Function]}
    />
  </div>
  <div
    style={
      Object {
        "alignItems": "center",
        "display": "flex",
        "flexDirection": "column",
        "justifyContent": "space-between",
      }
    }
  >
    <ForwardRef(Box)
      sx={
        Object {
          "marginLeft": "auto",
          "marginRight": "auto",
          "marginTop": 2,
          "padding": 2,
          "textAlign": "center",
        }
      }
    >
      <ForwardRef(Typography)
        color="text.secondary"
        variant="h6"
      >
        stubName has not created any pins
      </ForwardRef(Typography)>
    </ForwardRef(Box)>
    <img
      alt="no-pins-created"
      src={
        Object {
          "canInstrument": true,
          "createTransformer": [Function],
          "getCacheKey": [Function],
          "getCacheKeyAsync": [Function],
          "process": [Function],
          "processAsync": [Function],
        }
      }
      style={
        Object {
          "height": 200,
          "width": 200,
        }
      }
    />
  </div>
</Fragment>
`;

exports[`The profile page Will render signin for non-authenticated users 1`] = `
<SignIn
  removeSignin={[Function]}
/>
`;
